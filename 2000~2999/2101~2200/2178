from collections import deque

def bfs(maze, n, m):
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    
    queue = deque([(0, 0)])
    visited = [[False] * m for _ in range(n)]
    visited[0][0] = True
    distance = [[0] * m for _ in range(n)]
    distance[0][0] = 1
    
    while queue:
        x, y = queue.popleft()
        
        if x == n-1 and y == m-1:
            return distance[x][y]
        
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            
            if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == 1 and not visited[nx][ny]:
                queue.append((nx, ny))
                visited[nx][ny] = True
                distance[nx][ny] = distance[x][y] + 1

n, m = map(int, input().split())
maze = []
for _ in range(n):
    row = list(map(int, input().strip()))
    maze.append(row)

print(bfs(maze, n, m))