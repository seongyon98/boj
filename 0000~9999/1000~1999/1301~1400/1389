from collections import deque

def bfs(graph, start):
    visited = [False] * (len(graph) + 1)
    distance = [0] * (len(graph) + 1)
    queue = deque([(start, 0)])
    visited[start] = True
    
    while queue:
        node, dist = queue.popleft()
        distance[node] = dist
        for neighbor in graph[node]:
            if not visited[neighbor]:
                visited[neighbor] = True
                queue.append((neighbor, dist+1))
                
    return distance

def find_kevin_bacon(graph):
    min_kevin_bacon = float('inf')
    min_person = 0
    
    for person in range(1, len(graph)):
        distances = bfs(graph, person)
        kevin_bacon = sum(distances[1:])
        if kevin_bacon < min_kevin_bacon:
            min_kevin_bacon = kevin_bacon
            min_person = person
            
    return min_person

n, m = map(int, input().split())
graph = [[] for _ in range(n+1)]

for _ in range(m):
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)

print(find_kevin_bacon(graph))