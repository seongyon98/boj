def dfs(grid, visited, x, y, N):
    stack = [(x, y)]
    color = grid[x][y]
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    
    while stack:
        cx, cy = stack.pop()
        for dx, dy in directions:
            nx, ny = cx + dx, cy + dy
            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny] and grid[nx][ny] == color:
                visited[nx][ny] = True
                stack.append((nx, ny))

def count_regions(grid, N):
    visited = [[False] * N for _ in range(N)]
    region_count = 0
    for i in range(N):
        for j in range(N):
            if not visited[i][j]:
                visited[i][j] = True
                dfs(grid, visited, i, j, N)
                region_count += 1
    return region_count

def solve(N, grid):
    normal_grid = [row[:] for row in grid]
    rg_grid = [row[:] for row in grid]
    for i in range(N):
        for j in range(N):
            if rg_grid[i][j] == 'G':
                rg_grid[i][j] = 'R'

    normal_regions = count_regions(normal_grid, N)
    rg_regions = count_regions(rg_grid, N)
    
    return normal_regions, rg_regions

n = int(input())
grid = [list(input().strip()) for _ in range(n)]

normal, rg = solve(n, grid)
print(normal, rg)
